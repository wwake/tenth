// Global register values
// Free: x23, x28

.macro LOAD_ADDRESS register, location
 adrp \register, \location@PAGE
 add \register, \register, \location@PAGEOFF
.endm
.macro DATA_PUSH register
 str \register, [x19], #8
.endm
.macro DATA_PUSH_AB register1, register2
 DATA_PUSH \register2
 DATA_PUSH \register1
.endm
.macro DATA_PUSH_ABC register1, register2, register3
 DATA_PUSH \register3
 DATA_PUSH \register2
 DATA_PUSH \register1
.endm
.macro DATA_POP register
 ldr \register, [x19, #-8]!
.endm
.macro DATA_POP_AB register1, register2
 DATA_POP \register1
 DATA_POP \register2
.endm
.macro DATA_POP_ABC register1, register2, register3
 DATA_POP_AB \register1, \register2
 DATA_POP \register3
.endm
.macro DATA_TOP register
 ldr \register, [x19, #-8]
.endm
.macro CONTROL_PUSH register
 str \register, [x27], #8
.endm
.macro CONTROL_POP register
 ldr \register, [x27, #-8]!
.endm
.macro STD_PROLOG
 str lr, [sp, #-16]!
.endm
.macro STD_EPILOG
 ldr lr, [sp], #16
.endm
// Store register contents into next slot in secondary
.macro STORE_SEC register
 str \register, [x25], #8
.endm

.include "repl.macros"
.global colon
.global semicolon
.global define_word
.text
.p2align 2
// define_word:
// Input: x0 = ptr to word string
// Effects: store word string to secondary, create first two slots of header
//   (ptr to previous dictionary, ptr to word string)
//   DICT_PTR is updated, SEC_SPACE points to not-yet-filled third slot of header
//
define_word:
 STD_PROLOG
 // Put word string after last secondary
 mov x1, x25
 bl strcpyz
 // Adjust SEC_SPACE to a 64-bit boundary
 mov x0, x25
 bl strlen
 add x0, x0, #8
 and x0, x0, #-8
 mov x1, x25
 add x25, x25, x0
 // Put old dictionary at first slot; update dictionary
 STORE_SEC x21
 sub x21, x25, #8
 // Put pointer to word string in 2d slot
 STORE_SEC x1
 STD_EPILOG
 ret
// colon (:) - enter compile mode
colon:
 STD_PROLOG
 // Read the word to be defined
 bl readWord
 // Save word and create first two cells of header
 bl define_word
 // Put pointer to start2d in the third slot
 LOAD_ADDRESS x0, start2d
 STORE_SEC x0
 // Change to Compile mode
 mov x24, COMPILE_MODE
 STD_EPILOG
 ret
// semicolon (;) - exit compile mode
// Write a pointer to end2d's word address as last entry in secondary
//
semicolon:
 STD_PROLOG
 LOAD_ADDRESS x0, end2d_wordAddress
 str x0, [x25], #8
 mov x24, RUN_MODE
 STD_EPILOG
 ret
