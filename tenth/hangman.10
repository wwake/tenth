# Words that could be built in

# acb - move third item to second in stack
#   abc => acb
: acb cab swap ;

# bca - move top item to third in stack
#   abc => bca
: bca cab cab ;

# @++ - increment variable
#   variable-addr => ...   [but variable is incremented]
: @++
	dup	# var var
	@	# int var
	1 + # (int+1) var
	@=  # ...
;

# dup2 - duplicate top two items of stack
#   abc => ababc
: dup2
	bab	# babc
	bab # ababc
;

: .$^ .$ pop ;

: ...
   "S= " .$^
   . " " .$^ bca
   . " " .$^ bca
   . " " .$^ bca
   nl
;


# string ... -> bool string ...
: isEmpty$
	dup		# string string
	head$	# char string' string
	swap pop # char string
	==0		# bool string
;


: head2$	# In: s2 s1 ...
	head$	# c2 s2' s1
	cab		# s1 c2 s2'
	head$ 	# c1 s1' c2 s2'
	cab	  	# c2 c1 s1' s2'
;

: ==$  # stack= s2 s1 ...
	head2$  # c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 c2 c1 s1' s2'

	while
		==
		==0
		!
		&
	do
		# characters are == and not 0
		# c1 c2 c1 s1' s2'

		pop pop pop	# s1' s2'
		head2$		# c1 c2 s1' s2'
		dup2
		dup2		# c2 c1 c2 c1 c2 c1 s1' s2'
	od

	# c1 c2 c1 s1' s2'
	pop  		# c2 c1 s1' s2'

	==

	cba
	pop pop
;



var s2a_index
var s2a_array

# string_to_array - convert string to array
# Effect:  string arrayPtr => ...
#
: string_to_array
	s2a_index 0 @=

	swap		# array string
	s2a_array swap @=	# string

	head$   # c string'

	while
		dup 	# c c string'
		0
		!=
	do			# c string'
		s2a_array @ swap	# c array string'
		s2a_index @		# index c array string'
		swap	# c index array string'
		@+=		# string'

		s2a_index @++
		head$	# c string'
	od

	# c string'
	s2a_array		# array c string'
	s2a_index @		# index array c string'
	cab		# c index array string'
	@+=		# string'
	pop
;

# length$ - get length of string
#   string => int
: length$
	0 swap	# string count(0)
	head$	# c string count

	while
		0 !=	# string count
	do
		swap 1 +	# count' string
		swap	# string count'
		head$	# c string' count'
	od

	# string count
	pop
;


var repeat_array
var repeat_char

# repeat$ - repeats characters to create a string
#   character array length
: repeat$
	repeat_char swap @=		# [store repeat character]
	repeat_array swap @=	# [store the array]
	0			# index length

	while
		dup2	# index length index length
		!=		# index length
	do
		dup		# index index length
		repeat_array @ swap	# index array index length
		repeat_char @ 		# '_' index array index length
		@+=		# index length
		1 + 	# index' length
	od

	repeat_array @ swap 0	# 0 index array length
	@+=			# length
	pop
;

#####

# include tenthUnit
: assertEqual
	dup2

	==
	if
		pop pop
	else
		"Error: values differ" .$ pop nl
		"  a=" .$ pop
		. pop nl
		"  b=" .$ pop
		. pop nl
	fi
;

: assertEqual$
	dup2

	==$
	if
		pop pop
	else
		"Error: string values differ" .$ pop nl
		"  a=" .$ pop
		.$ pop nl
		"  b=" .$ pop
		.$ pop nl
	fi
;


#####
#  On to Hangman...

# Clear the screen (VT100 commands)
: screen_clear esc "[2J" .$^ ;

# screen_move_to - move the cursor to the specified position
#  in: col row ... => ...
: screen_move_to swap esc "[" .$^ . pop ";" .$^ . pop "H" .$^ ;

#####

2 array title	# array of strings

: title_init
	title 0 "HANGMAN" @+=
	title 1 "" @+=
;

title_init

#####

8 array scaffold  # array of strings

: scaffold_init
	scaffold 0 "_____" @+=
	scaffold 1 "|/   |" @+=
	scaffold 2 "|" @+=
	scaffold 3 "|" @+=
	scaffold 4 "|" @+=
	scaffold 5 "|" @+=
	scaffold 6 "|" @+=
	scaffold 7 "" @+=
;

scaffold_init



# draw_at - moves to row/col and draws the string
#	col row string ... => ...
: draw_at
	screen_move_to
	.$^
;


var draw_routine
var draw_index
var draw_column
var draw_row

# Draw array of strings, one per line, starting in given col and row
#    routine_name col row array ... => ...
: draw
	draw_routine swap @=		# col row array
	draw_index 0 @=
	draw_column swap @=			# row array
	draw_row swap @=			# array

	while
		dup				# array array
		draw_index @	# int array array
		@+				# string array
		isEmpty$ !		# bool string array
	do					# string array
		draw_index @	# index string array
		draw_row @		# row index string array
		+				# (index+row) string array
		draw_column @	# col row string array

		draw_routine @	# routine_name col row string array
		call			# array

		draw_index @++	# array
	od
;


100 array clue

100 array answer

# game_init - saves answer string and creates initial clue
#  Note: 95=_
# Input: answer - top of stack
# Output: sets answerString
#
: game_init			# string
	dup							# string string
	answer swap	string_to_array	# string [and builds the answer array]

	length$		# length
	clue 		# array length
	95			# '_' array length
	repeat$
;

: game_over
	clue make$
	answer make$
	==$
;

: hangman
	screen_clear

	title 2 35 "draw_at" draw

	clue make$ 4 35 draw_at

	scaffold 6 35 "draw_at" draw

	nl nl nl
;

: test_empty_answer
	" test_empty_answer " .$^

	"" game_init

	game_over 1 assertEqual
;

: test_string_answer " test_string_answer " .$^
	"hi" game_init

	answer make$ "hi" assertEqual$
	clue make$ "__" assertEqual$

	game_over 0 assertEqual
;

# update_clue - adjust clue if character is found
#   ch => ...
var clue_index

: update_clue
	clue_index 0 @=		# ch

	while
		answer clue_index @ @+	# ch-ans ch
		dup		# ch-ans ch-ans ch
		0		# 0 ch-ans ch-ans ch
		!=		# bool ch-ans ch
	do			# ch-ans ch
		bab		# ch ch-ans ch
		==			# bool ch
		if			# ch
			dup		# ch ch
			clue clue_index @ cab @+=  	# ch
		fi			# ch
		clue_index @++
	od
#...
	pop pop
#"after" .$^ .
;

: test_update_clue_first_letter_match " test_update_clue_first_letter_match " .$^
	"cat" game_init

	99 update_clue	# 'c'

	clue make$ "c__" assertEqual$
	game_over 0 assertEqual
;

: test_update_clue_other_letter_match " test_update_clue_other_letter_match " .$^
	"canal" game_init

	97 update_clue	# 'a'

	clue make$ "_a_a_" assertEqual$
	game_over 0 assertEqual
;

# future tests: test for a in cat, test for a in canal
# do drawing too

: test_update_clue test_update_clue_first_letter_match test_update_clue_other_letter_match ;
