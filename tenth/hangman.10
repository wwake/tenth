: acb cab swap ;

: dup2
	bab
	swap
	dup
	acb
;

: .$^ .$ pop ;

: head2$	# In: s2 s1 ...
	head$	# c2 s2' s1
	cab		# s1 c2 s2'
	head$ 	# c1 s1' c2 s2'
	cab	  	# c2 c1 s1' s2'
;

: ==$  # stack: s2 s1 ...
	head2$  # c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 c2 c1 s1' s2'

	while
		==
		==0
		!
		&
	do
		# characters are == and not 0
		# c1 c2 c1 s1' s2'

		pop pop pop	# s1' s2'
		head2$		# c1 c2 s1' s2'
		dup2
		dup2		# c2 c1 c2 c1 c2 c1 s1' s2'
	od

	# c1 c2 c1 s1' s2'
	pop  		# c2 c1 s1' s2'

	==

	cba
	pop pop
;

: assertEqual
	dup2

	==
	if
		pop pop
	else
		"Error: values differ" .$ pop nl
		"  a=" .$ pop
		. pop nl
		"  b=" .$ pop
		. pop nl
	fi
;

: assertEqual$
	dup2

	==$
	if
		pop pop
	else
		"Error: string values differ" .$ pop nl
		"  a=" .$ pop
		.$ pop nl
		"  b=" .$ pop
		.$ pop nl
	fi
;


: test_empty_strings_equal "" "" ==$ 1 assertEqual ;

: test_different_strings_unequal  "one" "seven" ==$ 0 assertEqual ;

: test_strings test_empty_strings_equal test_different_strings_unequal ;

#####

: screen_clear esc "[2J" .$^ ;

#  in: row col ...
: screen_move_to swap esc "[" .$^ .$^ ";" .$^ .$^ "H" .$^ ;

#####

: title "HANGMAN" ;




: hangman
	screen_clear
	"1" "40" screen_move_to
	title .$^ nl
	nl nl nl
;

: test_title
  title
  "HANGMAN"
  assertEqual$
;

: test_hangman test_title ;

: test_all test_strings test_hangman ;

