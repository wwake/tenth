: acb cab swap ;

: dup2
	bab
	swap
	dup
	acb
;

: .$^ .$ pop ;

: head2$	# In: s2 s1 ...
	head$	# c2 s2' s1
	cab		# s1 c2 s2'
	head$ 	# c1 s1' c2 s2'
	cab	  	# c2 c1 s1' s2'
;

: ==$  # stack= s2 s1 ...
	head2$  # c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 s1' s2'
	dup2	# c2 c1 c2 c1 c2 c1 s1' s2'

	while
		==
		==0
		!
		&
	do
		# characters are == and not 0
		# c1 c2 c1 s1' s2'

		pop pop pop	# s1' s2'
		head2$		# c1 c2 s1' s2'
		dup2
		dup2		# c2 c1 c2 c1 c2 c1 s1' s2'
	od

	# c1 c2 c1 s1' s2'
	pop  		# c2 c1 s1' s2'

	==

	cba
	pop pop
;

: assertEqual
	dup2

	==
	if
		pop pop
	else
		"Error: values differ" .$ pop nl
		"  a=" .$ pop
		. pop nl
		"  b=" .$ pop
		. pop nl
	fi
;

: assertEqual$
	dup2

	==$
	if
		pop pop
	else
		"Error: string values differ" .$ pop nl
		"  a=" .$ pop
		.$ pop nl
		"  b=" .$ pop
		.$ pop nl
	fi
;


: test_empty_strings_equal "" "" ==$ 1 assertEqual ;

: test_different_strings_unequal  "one" "seven" ==$ 0 assertEqual ;

: test_strings test_empty_strings_equal test_different_strings_unequal ;

#####

: screen_clear esc "[2J" .$^ ;

#  in: col row ... => ...
: screen_move_to swap esc "[" .$^ . pop ";" .$^ . pop "H" .$^ ;

#####

: title "HANGMAN" ;

# returns array of strings
8 array scaffold

: scaffold_init
	scaffold 0 "_____" @+=
	scaffold 1 "|/   |" @+=
	scaffold 2 "|" @+=
	scaffold 3 "|" @+=
	scaffold 4 "|" @+=
	scaffold 5 "|" @+=
	scaffold 6 "|" @+=
	scaffold 7 "" @+=
;

scaffold_init


# string ... -> bool string ...
: isEmpty$
	dup		# string string
	head$	# char string' string
	swap pop # char string
	==0		# bool string
;

# abc => bca
: bca cab cab ;


# drawAt - moves to row/col and draws the string
#	col row string ... => ...
: drawAt
	screen_move_to	# string
	.$^
;

: ...
   "S= " .$^
   . " " .$^ bca
   . " " .$^ bca
   . " " .$^ bca
   nl
;


// @++ - increment variable
//   variable-addr => ...   [but variable is incremented]
: @++
	dup	# var var
	@	# int var
	1 + # (int+1) var
	@=  # ...
;

variable test_inc_var
: test_increment
	# arrange
	test_inc_var 7 @=

	# act
	test_inc_var @++

	# assert
	test_inc_var @
	8
	assertEqual
;

variable draw_index
variable draw_column
variable draw_row

# Draw array of strings, one per line, starting in given col and row
#   S= col row array ... => ...
: draw
	draw_index 0 @=
	draw_column swap @=			# row array
	draw_row swap @=			# array

	while
		dup				# array array
		draw_index @	# int array array
		@+				# string array
		isEmpty$ !		# bool string array
	do					# string array
		draw_index @	# index string array
		draw_row @		# row index string array
		+				# (index+row) string array
		draw_column @	# col row string array
		drawAt			# array

		draw_index @++	# array
	od
;

: hangman
	screen_clear

	2 40 screen_move_to
	title .$^ nl

	scaffold 10 35 draw


	nl nl nl
;

: test_title
  title
  "HANGMAN"
  assertEqual$
;

: test_hangman test_title ;

: test_all test_strings test_increment test_hangman ;

