// Global register values
// Free: x23, x27, x28

.macro LOAD_ADDRESS register, location
 adrp \register, \location@PAGE
 add \register, \register, \location@PAGEOFF
.endm
.macro DATA_PUSH register
 str \register, [x19], #8
.endm
.macro DATA_POP register
 ldr \register, [x19, #-8]!
.endm
.macro DATA_POP_AB register1, register2
 DATA_POP \register1
 DATA_POP \register2
.endm
.macro DATA_TOP register
 ldr \register, [x19, #-8]
.endm
.macro STD_PROLOG
 str lr, [sp, #-16]!
.endm
.macro STD_EPILOG
 ldr lr, [sp], #16
.endm
.equ META, 1
.equ REGULAR, 0
// DICT_HEADER name, codeAddress
// Input:
//   name of the entry "in quotes"
//   codeAddress of code in entry
//   x21 [SYS_DICT = dictionary pointer] points to newest dictionary entry
// Process:
//   Store 3 words in next entry: link to previous dictionary entry, pointer to name string, and pointer to code
//   Increment SYS_DICT by 3 words
// Uses:
//   x0-x4 as a temp
//   SYS_DICT is increased for new entry
//
.macro DICT_HEADER name, codeAddress, isMeta=REGULAR
 str x21, [x21, #24]
 add x21, x21, #24
 LOAD_ADDRESS x0, L_DICT_HEADER_\@
 str x0, [x21, #8]
 mov x3, \isMeta
 mov x4, META
 cmp x3, x4
 b.ne L_skip_meta\@
  LOAD_ADDRESS x1, metaNext
  ldr x2, [x1]
  str x0, [x2]
  add x2, x2, #8
  str x2, [x1]
L_skip_meta\@:
 LOAD_ADDRESS x0, \codeAddress
 str x0, [x21, #16]
 .data
 L_DICT_HEADER_\@: .asciz "\name"
 .text
.endm
.macro DICT_END
 LOAD_ADDRESS x0, metaNext
 ldr x0, [x0]
 str xzr, [x0]
.endm

.include "unix_functions.macros"
.global _start
.text
.align 2
_start:
 STD_PROLOG
 str x22, [sp, #8]
 bl data_stack_init
 bl L_sec_space_init
 bl L_load_system_dictionary
 bl L_error_handler_init
 // Run
 bl repl
 ldr x22, [sp, #8]
 STD_EPILOG
 ret
L_sec_space_init:
 // Setup SEC_SPACE
 LOAD_ADDRESS x25, L_secondary_space
 ret
L_load_system_dictionary:
 STD_PROLOG
 bl dict_init
 DICT_HEADER "0", push0
 DICT_HEADER "1", push1
 DICT_HEADER "dup", dup
 DICT_HEADER "neq", neq
 DICT_HEADER "nl", nl
 DICT_HEADER "+", add
 DICT_HEADER "-", sub
 DICT_HEADER "*", mul
 DICT_HEADER "/", div
 DICT_HEADER "%", mod
 DICT_HEADER ":", _colon, META
 DICT_HEADER ";", _semicolon, META
 DICT_HEADER ".", dotprint
 DICT_END
 STD_EPILOG
 ret
L_error_handler_init:
 LOAD_ADDRESS x0, global_word_not_found_handler
 LOAD_ADDRESS x1, wordNotFoundError
 str x1, [x0]
 ret
.data
L_secondary_space:
 .fill 20000, 8, 0
