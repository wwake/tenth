.equ META, 1
.equ REGULAR, 0

// DICT_HEADER name, codeAddress
// Input:
//   name of the entry "in quotes"
//   codeAddress of code in entry
//   x21 [SYS_DICT = dictionary pointer] points to newest dictionary entry
// Process:
//   Store 3 words in next entry: link to previous dictionary entry, pointer to name string, and pointer to code
//   Increment SYS_DICT by 3 words
// Uses:
//   x0-x4 as a temp
//   SYS_DICT is increased for new entry
//
.macro DICT_HEADER name, codeAddress, isMeta=REGULAR
	str SYS_DICT, [SYS_DICT, #24]
	add SYS_DICT, SYS_DICT, #24

	LOAD_ADDRESS x0, L_DICT_HEADER_\@
	str x0, [SYS_DICT, #8]

	mov x3, \isMeta
	mov x4, META
	cmp x3, x4
	b.ne L_skip_meta\@
		LOAD_ADDRESS x1, metaNext
		ldr x2, [x1]
		str x0, [x2]
		add x2, x2, #8
		str x2, [x1]

L_skip_meta\@:
	LOAD_ADDRESS x0, \codeAddress
	str x0, [SYS_DICT, #16]

	.data
	L_DICT_HEADER_\@: .asciz "\name"
	.text
.endm


.macro DICT_END
	LOAD_ADDRESS x0, metaNext
	ldr x0, [x0]
	str xzr, [x0]
.endm
